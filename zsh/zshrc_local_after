export PATH="/usr/bin:/usr/sbin:/bin:/sbin/:"
export PATH="/usr/local/sbin/:"$PATH
export PATH="/usr/local/bin/:"$PATH
export PATH="/usr/local/go/bin/:"$PATH
export PATH=$HOME"/.extra-bin/:"$PATH


# il_scripts


# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='mvim'
 fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Java default
export JAVA_1_8_HOME='/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/'
export JAVA_1_11_HOME='/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/'
export JAVA_HOME=${JAVA_1_11_HOME}

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

bindkey -v

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.

disownLastJob() {
  disown %$(echo $(jobs -l) | grep $! | awk '{printf $1}' | sed 's/\[//' | sed 's/\]//');
}

ports() {
    COMMAND="lsof -iTCP -P | grep LISTEN"

    if [[ $# -ne 0 ]]
    then
      COMMAND="${COMMAND} | grep $1"
    fi
    echo "${COMMAND}"
    eval "${COMMAND}"
}

compgen() {
    bash -c compgen $@;
}

run-test() {
    if [[ $# -ne 0 ]]
    then
        mvn -Dtest=${1} -DfailIfNoTests=false -DtrimStackTrace=false clean test -T 2C
    else
        echo "USAGE: runTest <testClass>"
    fi
}

tdump () {
    if [[ $# -ne 1 ]]
    then
      echo "USAGE: $0 <JPS process name>"
      return -1;
    else
      echo "Dumping $1.."
      for i in {0..4}
      do
        FILE="tdump.${i}.out"
        jstack "$(jps | grep ${1} | awk -F' ' '{printf "%s\n", $1}')" > ${FILE}
        echo "Dumped to $FILE.."
        sleep 2
      done
      echo "Done."
      return 0
    fi
}

alias list='/bin/ls'
alias ls='ls -lh'
alias ll='ls -GFlash'
alias ..='cd ..'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ,,='popd'
alias cb='pbcopy'
alias rsapub='cat ~/.ssh/id_rsa.pub | cb'
alias cp='cp -v'
alias mv='mv -v'
alias scp='scp -v'
alias mong-staging='/usr/local/Cellar/mongodb@3.4/3.4.18/bin/mongo --host stage/split-stage-shard-00-00-9osox.mongodb.net:27017,split-stage-shard-00-01-9osox.mongodb.net:27017,split-stage-shard-00-02-9osox.mongodb.net:27017 split_staging_v2 -u splitadminstaging -p benlomondstaging'
alias fix-repo='mvn clean install -Dmaven.test.skip=true -T 1'
alias aws='python ~/Library/Python/2.7/lib/python/site-packages/awscli'

## Alias pip to python -m pip
alias pip='python -m pip'
alias localcurl="""bash <(pbpaste | gsed 's/https\:\/\/api.split.io/http\:\/\/localhost\:8080/' | gsed \"s/-H 'User-Agent:.*-H 'Authorization/-H 'Authorization/\")"""

export PGPORT=5432

echo "=====ZSHRC CONFIGURATION OUTPUT=====";
echo "Setting PGPORT to ${PGPORT} . . . ";

echo "Copying cert to tunnelblick"
cp ~/.vpn/andrew_greene.crt ~/Library/Application\ Support/Tunnelblick/Configurations/prod.tblk/Contents/Resources/


export SPLIT_PROJECTS_ROOT=~/code
echo "Configuring split project root to: ${SPLIT_PROJECTS_ROOT}"
echo "Starting in split projects root: ${SPLIT_PROJECTS_ROOT}"
cd $SPLIT_PROJECTS_ROOT

split-dev() {
    pushd . 1>/dev/null; 
    cd ${SPLIT_PROJECTS_ROOT}/Main; 
    docker-compose $1 2>&1 1> ${SPLIT_PROJECTS_ROOT}/Main/docker-compose.log &
    popd 1>/dev/null;
}
echo "Adding postgres 9.4 binaries to path"
export PATH="/usr/local/opt/postgresql@9.4/bin:$PATH"

echo "Adding Redis 3.2 binaries to path"
export PATH="/usr/local/Cellar/redis@3.2/3.2.11/bin/:$PATH"

echo "Adding MongoDB 3.4 binaries to path"
export PATH="/usr/local/Cellar/mongodb@3.4/3.4.18/bin:"$PATH

source ~/code/zsh-nvm/zsh-nvm.plugin.zsh
echo "Sourcing NVM as a ZSH plugin."
export NVM_DIR="$HOME/.nvm"
echo "Configuring Node Version Manager working directory to: ${NVM_DIR}"
